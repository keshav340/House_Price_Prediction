# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17m_gKATGnRm_zaFWjQCQ8EEcZfBbRPzR
"""

#IMPORT  LIBRARY FOR PROJECT
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

#reading the dataset
dataset = pd.read_csv("/content/CarPrice_Assignment.csv")

print(dataset.info())

dataset.head(20)

dataset.describe()

cor = dataset.corr()
cor

"""Graph Visualization"""

sns.displot(dataset['wheelbase'])

sns.displot(dataset['symboling'])

sns.displot(dataset['carlength'])

sns.displot(dataset['carwidth'])

sns.displot(dataset['carheight'])

sns.displot(dataset['curbweight'])

sns.displot(dataset['boreratio'])

sns.displot(dataset['enginesize'])

sns.displot(dataset['stroke'])

sns.displot(dataset['compressionratio'])

sns.displot(dataset['horsepower'])

sns.displot(dataset['peakrpm'])

sns.displot(dataset['citympg'])

sns.displot(dataset['highwaympg'])

sns.displot(dataset['price'])

plt.bar(dataset['fueltype'],dataset['price'])
plt.xlabel("fuel type")
plt.ylabel("price")
plt.show()

plt.bar(dataset['fuelsystem'],dataset['price'])
plt.xlabel("fuelsystem")
plt.ylabel("price")
plt.show()

plt.bar(dataset['aspiration'],dataset['price'])
plt.xlabel("aspiration")
plt.ylabel("price")
plt.show()

plt.bar(dataset['carbody'],dataset['price'])
plt.xlabel("carbody")
plt.ylabel("price")
plt.show()

plt.bar(dataset['drivewheel'],dataset['price'])
plt.xlabel("doornumber")
plt.ylabel("price")
plt.show()

plt.bar(dataset['doornumber'],dataset['price'])
plt.xlabel("doornumber")
plt.ylabel("price")
plt.show()

plt.bar(dataset['enginetype'],dataset['price'])
plt.xlabel("enginetype")
plt.ylabel("price")
plt.show()

plt.bar(dataset['cylindernumber'],dataset['price'])
plt.xlabel("doornumber")
plt.ylabel("price")
plt.show()

plt.bar(dataset['symboling'],dataset['price'])
plt.xlabel("symboling")
plt.ylabel("price")
plt.show()

plt.bar(dataset['wheelbase'],dataset['price'])
plt.xlabel("wheelbase")
plt.ylabel("price")
plt.show()

plt.bar(dataset['carlength'],dataset['price'],width =2.0)
plt.xlabel("carlength")
plt.ylabel("price")
plt.show()

plt.bar(dataset['carwidth'],dataset['price'])
plt.xlabel("carwidth")
plt.ylabel("price")
plt.show()

plt.bar(dataset['carheight'],dataset['price'])
plt.xlabel("carheight")
plt.ylabel("price")
plt.show()

plt.bar(dataset['boreratio'],dataset['price'])
plt.xlabel("boreratio")
plt.ylabel("price")
plt.show()

plt.bar(dataset['compressionratio'],dataset['price'])
plt.xlabel("compressionratio")
plt.ylabel("price")
plt.show()

plt.bar(dataset['citympg'],dataset['price'])
plt.xlabel("citympg")
plt.ylabel("price")
plt.show()

plt.bar(dataset['highwaympg'],dataset['price'])
plt.xlabel("highwaympg")
plt.ylabel("price")
plt.show()

"""Data preperation"""

X = dataset[['carlength','wheelbase','carwidth','curbweight','enginesize','boreratio','horsepower','peakrpm','citympg','highwaympg','drivewheel','enginetype','cylindernumber','fuelsystem','carbody','symboling','CarName','doornumber',]]

y = dataset['price']

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
for col in dataset.columns:
    dataset[col]=le.fit_transform(dataset[col])
dataset.head(10)

dataset.drop('car_ID',axis=1,inplace=True)

cor = dataset.corr()
cor

plt.figure(figsize=(16,8))
sns.heatmap(cor,cmap='YlGnBu',annot=True)
plt.show()

X = dataset[['aspiration','drivewheel','wheelbase','carlength','carwidth','curbweight','enginesize','fuelsystem','boreratio','horsepower','citympg','highwaympg']]

y = dataset['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

from sklearn.linear_model import LogisticRegression

logisticRegr = LogisticRegression()

model.fit(X_train,y_train)

y_pred = model.predict(X_test)

print("Training accuracy :", model.score(X_train, y_train))
print("Testing accuracy :", model.score(X_test, y_test))